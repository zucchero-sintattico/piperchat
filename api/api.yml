openapi: '3.0.3'
info:
  title: Piperchat API
  version: '1.0'
  description: |
    Piperchat design API description

tags:
  - name: auth
    description: Everything about authentication
  - name: profile
    description: Everything about user profile
  - name: users
    description: Everything about users informations
  - name: friends
    description: Everything about friends relationships
  - name: servers
    description: Everything about servers informations
  - name: message-channels
    description: Everything about message-channel informations
  - name: multimedia-channels
    description: Everything about multimedia-channel informations
  - name: conversation
    description: Everything about friends conversation

paths:
  /auth/login:
    post:
      summary: Login a user
      description: Login the user using his username and password
      tags:
        - 'auth'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                  description: Username of the user to be logged in
                password:
                  type: string
                  example: password123
              required:
                  - username
                  - password
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
  
  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user with some informations
      tags:
        - 'auth'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                password:
                  type: string
                  example: password123
                email:
                  type: string
                  example:
                description:
                  type: string
                  example: 'Here to make new friends'
                photo:
                  type: string
                  format: base64
              required:
                - username
                - password
                - email
      responses:
        '200':
          description: Ok, either the user is created or already exists, a verification email is sent to the user
        '400':
          description: Bad request
        # '409':
        #   description: Username already exists # this is a security issue, we should not tell the user that the username already exists
  
  /auth/logout:
    post:
      summary: Logout a user
      description: Logout the user
      tags:
        - 'auth'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
  
  /auth/refresh-token:
    post:
      summary: Refresh token
      description: Refresh the user authentication token
      tags:
        - 'auth'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
  
  /profile/photo:
    put:
      summary: Change photo
      description: Change user profile photo
      tags:
        - 'profile'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: base64
              required:
                - photo
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          "$ref": "#/components/responses/UnauthorizedError"

  /profile/description:
    put:
      summary: Change description
      description: Change user profile description
      tags:
        - 'profile'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                  example: 'Here to make new friends'
              required:
                - description
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          "$ref": "#/components/responses/UnauthorizedError"

  /users/{username}/status:
    get:
      summary: Get online status
      description: Get the online status of a user
      tags:
        - 'users'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  online:
                    type: boolean
        '400':
          description: Bad request
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: User not found

  /users/{username}/photo:
    get:
      summary: Get photo
      description: Get the photo of a user
      tags:
        - 'users'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo:
                    type: string
                    format: base64
        '400':
          description: Bad request
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: User not found

  /users/{username}/description:
    get:
      summary: Get description
      description: Get the description of a user
      tags:
        - 'users'
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                    example: 'Here to make new friends'
        '400':
          description: Bad request
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
        '404':
          description: User not found

  /friends:
    get:
      summary: Get friends list
      description: Get the list of friends of the user
      tags:
        - 'friends'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - user1
                  - user2
        '401':
          "$ref": "#/components/responses/UnauthorizedError"

  /friends/requests:
    get:
      summary: Get friend requests list
      description: Get the list of friend requests of the user
      tags:
        - 'friends'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - user3
                  - user4
        '401':
          "$ref": "#/components/responses/UnauthorizedError"
    post:
      summary: Manage friend request
      description: Manage a friend request in order to send, accept or deny it
      tags:
        - 'friends'
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum:
                    - send
                    - accept
                    - deny
                otherUser:
                  type: string
                  example: user4
              required:
                - action
                - otherUser
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          "$ref": '#/components/responses/UnauthorizedError'
        '404':
          description: User not found

  /servers/{serverId}:
    get:
      tags:
        - 'servers'
      parameters:
        - in: query
          name: serverId
          required: true
          description: serverId of the server whose informations you want to get
          schema:
            type: string
          example: server1
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
  /servers:
    get:
      tags:
        - 'servers'
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
    post:
      tags:
        - 'servers'
      parameters:
        - in: query
          name: name
          required: true
          description: name of the server that you want to create
          schema:
            type: string
          example: Beautiful Server
        - in: query
          name: description
          required: false
          description: description of the server that you want to create
          schema:
            type: string
          example: This server is created for make new friends!
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    put:
      tags:
        - 'servers'
      parameters:
        - in: query
          name: serverId
          required: true
          description: serverId of the server that you want to update
          schema:
            type: string
          example: Beautiful Server
        - in: query
          name: name
          required: false
          description: name of the server that you want to set
          schema:
            type: string
          example: Beautiful server 2.0!
        - in: query
          name: description
          required: false
          description: description of the server that you want to set
          schema:
            type: string
          example: This is a new description for my server!
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    delete:
      tags:
        - 'servers'
      parameters:
        - in: query
          name: serverId
          required: true
          description: serverId of the server that you want to delete
          schema:
            type: string
          example: server1
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /message-channels/{messageChannelID}:
    get:
      tags:
        - 'message-channels'
      parameters:
        - in: query
          name: messageChannelID
          required: true
          description: Id of the message channel
          schema:
            type: string
          example: message-channel1
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
  /message-channels:
    get:
      tags:
        - 'message-channels'
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
    post:
      tags:
        - 'message-channels'
      parameters:
        - in: query
          name: serverId
          required: true
          description: serverId of the message channel that you want to create
          schema:
            type: string
          example: server1
        - in: query
          name: name
          required: true
          description: name of the message channel that you want to create
          schema:
            type: string
          example: Beautiful Channel
        - in: query
          name: description
          required: false
          description: description of the message channel that you want to create
          schema:
            type: string
          example: This channel is created for make new friends!
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    put:
      tags:
        - 'message-channels'
      parameters:
        - in: query
          name: messageChannelID
          required: true
          description: messageChannelID of the message channel that you want to update
          schema:
            type: string
          example: message-channel1
        - in: query
          name: name
          required: false
          description: name of the message channel that you want to set
          schema:
            type: string
          example: Beautiful channel 2.0!
        - in: query
          name: description
          required: false
          description: description of the message channel that you want to set
          schema:
            type: string
          example: This is a new description for my channel!
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    delete:
      tags:
        - 'message-channels'
      parameters:
        - in: query
          name: messageChannelID
          required: true
          description: messageChannelID of the message channel that you want to delete
          schema:
            type: string
          example: message-channel1
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /multimedia-channels/{multimediaChannelID}:
    get:
      tags:
        - 'multimedia-channels'
      parameters:
        - in: query
          name: multimediaChannelID
          required: true
          description: Id of the multimedia channel
          schema:
            type: string
          example: multimedia-channel1
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
  /multimedia-channels:
    get:
      tags:
        - 'multimedia-channels'
      responses:
        '200':
          description: Ok
        '401':
          description: Unauthorized
    post:
      tags:
        - 'multimedia-channels'
      parameters:
        - in: query
          name: serverId
          required: true
          description: serverId of the multimedia channel that you want to create
          schema:
            type: string
          example: server1
        - in: query
          name: name
          required: true
          description: name of the multimedia channel that you want to create
          schema:
            type: string
          example: Beautiful Channel
        - in: query
          name: description
          required: false
          description: description of the multimedia channel that you want to create
          schema:
            type: string
          example: This channel is created for make new friends!
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    put:
      tags:
        - 'multimedia-channels'
      parameters:
        - in: query
          name: multimediaChannelID
          required: true
          description: multimediaChannelID of the multimedia channel that you want to update
          schema:
            type: string
          example: multimedia-channel1
        - in: query
          name: name
          required: false
          description: name of the multimedia channel that you want to set
          schema:
            type: string
          example: Beautiful channel 2.0!
        - in: query
          name: description
          required: false
          description: description of the multimedia channel that you want to set
          schema:
            type: string
          example: This is a new description for my channel!
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    delete:
      tags:
        - 'multimedia-channels'
      parameters:
        - in: query
          name: multimediaChannelID
          required: true
          description: multimediaChannelID of the multimedia channel that you want to delete
          schema:
            type: string
          example: multimedia-channel1
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /conversation:
    post:
      tags:
        - 'conversation'
      parameters:
        - in: query
          name: conversationID
          required: true
          description: Id of the conversation
          schema:
            type: number
          example: 12345
        - in: query
          name: content
          required: true
          description: content of the message
          schema:
            type: string
          example: 'Hello Word'
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /conversation/{conversationID, lastN}:
    get:
      tags:
        - 'conversation'
      parameters:
        - in: query
          name: conversationID
          required: true
          description: Id of the conversation
          schema:
            type: number
          example: 12345
        - in: query
          name: lastN
          required: true
          description: Number of message to load
          schema:
            type: number
          example: 12345
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  /conversation/range/{from, to}:
    get:
      tags:
        - 'conversation'
      parameters:
        - in: query
          name: conversationID
          required: true
          description: Id of the conversation
          schema:
            type: number
          example: 12345
        - in: query
          name: from
          required: true
          description: message to lode from
          schema:
            type: number
          example: 12345
        - in: query
          name: to
          required: true
          description: message to lode to
          schema:
            type: number
          example: 12345
      responses:
        '200':
          description: Ok
        '400':
          description: Bad request
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    ForbiddenError:
      description: You don't have permission to access this resource

  parameters:
    username:
      name: username
      in: path
      required: true
      description: username of the user whose information you want to obtain
      schema:
        type: string
      example: user1
