asyncapi: 2.6.0
info:
  title: Piperchat Message broker
  version: 1.0.0
  description: |
    Piperchat intra microservices messages design

channels:
  user.logged.in:
    description: A user logged in
    subscribe:
      message:
        '$ref': '#/components/messages/User'

  user.logged.out:
    description: A user logged out
    subscribe:
      message:
        '$ref': '#/components/messages/User'

  user.online:
    description: A user is online
    subscribe:
      message:
        '$ref': '#/components/messages/User'

  user.offline:
    description: A user is offline
    subscribe:
      message:
        '$ref': '#/components/messages/User'

  user.created:
    description: A user is registered to the system
    subscribe:
      message:
        '$ref': '#/components/messages/RichUser'

  user.updated:
    description: A user is updated
    subscribe:
      message:
        '$ref': '#/components/messages/RichUser'

  user.deleted:
    description: A user is deleted
    subscribe:
      message:
        '$ref': '#/components/messages/User'

  friend.request.sent:
    description: A user sent a friend request to another one
    subscribe:
      message:
        '$ref': '#/components/messages/FriendRequest'

  friend.request.accepted:
    description: A user accepted a friend request from another one
    subscribe:
      message:
        '$ref': '#/components/messages/FriendRequest'

  friend.request.denied:
    description: A user denied a friend request from another one
    subscribe:
      message:
        '$ref': '#/components/messages/FriendRequest'

  server.created:
    description: A server is created
    subscribe:
      message:
        '$ref': '#/components/messages/ServerAdvanced'

  server.updated:
    description: A server has been updated
    subscribe:
      message:
        '$ref': '#/components/messages/ServerAdvanced'

  server.deleted:
    description: A server has been deleted
    subscribe:
      message:
        '$ref': '#/components/messages/Server'

  server.user.joined:
    description: A user joined a server
    subscribe:
      message:
        '$ref': '#/components/messages/ServerUser'

  server.user.left:
    description: A user left a server
    subscribe:
      message:
        '$ref': '#/components/messages/ServerUser'

  server.user.kicked:
    description: A user has been kicked from a server
    subscribe:
      message:
        '$ref': '#/components/messages/ServerUser'

  channel.created:
    description: A channel is created
    subscribe:
      message:
        '$ref': '#/components/messages/ChannelAdvanced'

  channel.updated:
    description: A channel has been updated
    subscribe:
      message:
        '$ref': '#/components/messages/ChannelAdvanced'

  channel.deleted:
    description: A channel has been deleted
    subscribe:
      message:
        '$ref': '#/components/messages/Channel'

  message.channel.sent:
    description: A new message has been sent to a channel
    subscribe:
      message:
        '$ref': '#/components/messages/MessageChannel'

  message.direct.sent:
    description: A new message has been sent to a user
    subscribe:
      message:
        '$ref': '#/components/messages/MessageDirect'

  session.created:
    description: A new session has been created
    subscribe:
      message:
        '$ref': '#/components/messages/Session'

  session.terminated:
    description: A session has been terminated
    subscribe:
      message:
        '$ref': '#/components/messages/Session'

  session.user.joined:
    description: A user joined a session
    subscribe:
      message:
        '$ref': '#/components/messages/SessionUser'

  session.user.left:
    description: A user left a session
    subscribe:
      message:
        '$ref': '#/components/messages/SessionUser'

components:
  messages:
    User:
      summary: A user
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/UserSchema'
    RichUser:
      summary: A user with additional data
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/RichUserSchema'
    Server:
      summary: A basic server (no additional data)
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/ServerBasicSchema'
    ServerAdvanced:
      summary: A server
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/ServerAdvancedSchema'
    ServerUser:
      summary: A server-user pair
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/ServerUserSchema'
    FriendRequest:
      summary: A friend request
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/FriendRequest'
    Channel:
      summary: A basic channel (no additional data)
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/ChannelBasicSchema'
    ChannelAdvanced:
      summary: A channel
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/ChannelAdvancedSchema'
    MessageChannel:
      summary: A message
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/MessageChannelSchema'
    MessageDirect:
      summary: A message
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/MessageDirectSchema'
    Session:
      summary: A session
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/SessionSchema'
    SessionUser:
      summary: A session user
      contentType: application/json
      payload:
        '$ref': '#/components/schemas/SessionUserSchema'

  schemas:
    FriendRequest:
      type: object
      properties:
        from:
          type: string
          description: Unique identifier representing a specific user
          example: user1
        to:
          type: string
          description: Unique identifier representing a specific user
          example: user2

    UserSchema:
      type: object
      required:
        - username
      properties:
        username:
          type: string
          description: Unique identifier representing a specific user
          example: user1

    RichUserSchema:
      allOf:
        - '$ref': '#/components/schemas/UserSchema'
        - type: object
          properties:
            email:
              type: string
              description: Email of the user
              example: user1@mail.com
            description:
              type: string
              description: Description of the user
              example: My user description
            profilePicture:
              type: object
              properties:
                data:
                  type: string
                contentType:
                  type: string
              description: Profile picture of the user
              example: { data: '...', contentType: 'image/png' }

    ServerBasicSchema:
      type: object
      properties:
        serverId:
          type: string
          description: Unique identifier representing a specific server
          example: server1

    ServerAdvancedSchema:
      allOf:
        - $ref: '#/components/schemas/ServerBasicSchema'
        - type: object
          properties:
            name:
              type: string
              description: Name of the server
              example: My server
            description:
              type: string
              description: Description of the server
              example: My server description
            owner:
              type: string
              description: Unique identifier representing a specific user
              example: user1

    ServerUserSchema:
      allOf:
        - $ref: '#/components/schemas/ServerBasicSchema'
        - type: object
          properties:
            username:
              type: string
              description: Unique identifier representing a specific user
              example: user1

    ChannelBasicSchema:
      type: object
      properties:
        serverId:
          type: string
          description: Unique identifier representing a specific server
          example: server1
        channelId:
          type: string
          description: Unique identifier representing a specific channel
          example: channel1

    ChannelAdvancedSchema:
      allOf:
        - $ref: '#/components/schemas/ChannelBasicSchema'
        - type: object
          properties:
            name:
              type: string
              description: Name of the channel
              example: general
            type:
              type: string
              description: Type of the channel
              example: message, multimedia
            description:
              type: string
              description: Description of the channel
              example: General discussion

    MessageSchema:
      type: object
      properties:
        messageId:
          type: string
          description: Unique identifier representing a specific message
          example: message1
        from:
          type: string
          description: Unique identifier representing a specific user
          example: user1

    MessageDirectSchema:
      allOf:
        - '$ref': '#/components/schemas/MessageSchema'
        - type: object
          properties:
            to:
              type: string
              description: Unique identifier representing a specific user
              example: user2

    MessageChannelSchema:
      allOf:
        - '$ref': '#/components/schemas/MessageSchema'
        - type: object
          properties:
            channelId:
              type: string
              description: Unique identifier representing a specific channel
              example: channel1

    SessionSchema:
      type: object
      properties:
        sessionId:
          type: string
          description: Unique identifier representing a specific session
          example: session1

    SessionUserSchema:
      allOf:
        - '$ref': '#/components/schemas/SessionSchema'
        - type: object
          properties:
            userId:
              type: string
              description: Unique identifier representing a specific user
              example: user1
